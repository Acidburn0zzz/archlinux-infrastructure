---

- name: read /etc/motd
  command: cat /etc/motd
  register: motd_contents

- name: check whether we're running in the Hetzner rescue system
  fail: msg="Not running in Hetzner rescue system!"
  when: "'Hetzner Rescue' not in motd_contents.stdout"

- name: partition and format the disks (btrfs)
  command: mkfs.btrfs -f -L rootfs -d {{ raid_level|default(raid1) }} {{ system_disks|join(' ') }}
  when: filesystem == "btrfs" and system_disks|length == 2

- name: partition and format the disks (btrfs)
  filesystem: dev="{{ system_disks[0] }}" fstype=btrfs force=yes opts="-L rootfs"
  when: filesystem == "btrfs" and system_disks|length == 1

- name: create BIOS boot partitions
  parted: device={{ item }} number=1 state=present part_end=10MiB flags=[boot]
  when: filesystem == "ext4"
  with_items:
    - "{{ system_disks }}"

- name: create RAID partitions
  parted: device={{ item }} number=2 state=present flags=[raid]
  when: filesystem == "ext4"
  with_items:
    - "{{ system_disks }}"

- name: create MDADM array
  command: mdadm --create --level=1 --raid-devices=2 --run /dev/md0 /dev/sda2 /dev/sdb2
  when: filesystem == "ext4" and system_disks|length == 2

- name: format the MDADM array
  filesystem: dev=/dev/md0 fstype=ext4
  when: filesystem == "ext4" and system_disks|length == 2

- name: mount the filesystem (btrfs)
  mount: src="{{ system_disks[0] }}" path=/mnt fstype=btrfs state=mounted opts="compress=lzo"
  when: filesystem == "btrfs"

- name: mount the filesystem (ext4)
  mount: name=/mnt src=/dev/md0 fstype=ext4 state=mounted
  when: filesystem == "ext4" and system_disks|length == 2

- name: touch LOCK file on mountpoint
  file: path=/mnt/LOCK state=touch

- name: download bootstrap image
  get_url:
    url: https://mirrors.kernel.org/archlinux/iso/2019.03.01/archlinux-bootstrap-2019.03.01-x86_64.tar.gz
    dest: /tmp/

- name: extract boostrap image
  command: tar xf archlinux-bootstrap-2019.03.01-x86_64.tar.gz
  args:
    chdir: /tmp
    creates: /tmp/root.x86_64

- name: copy resolv.conf to bootstrap chroot
  copy: remote_src=True src=/etc/resolv.conf dest=/tmp/root.x86_64/etc/resolv.conf

- name: mount /proc to bootstrap chroot
  command: mount --rbind /proc /tmp/root.x86_64/proc creates=/tmp/root.x86_64/proc/uptime

- name: mount /sys to bootstrap chroot
  command: mount --rbind /sys /tmp/root.x86_64/sys creates=/tmp/root.x86_64/sys/dev

- name: mount /dev to bootstrap chroot
  command: mount --rbind /dev /tmp/root.x86_64/dev creates=/tmp/root.x86_64/dev/zero

- name: mount /mnt to bootstrap chroot
  command: mount --rbind /mnt /tmp/root.x86_64/mnt creates=/tmp/root.x86_64/mnt/LOCK

- name: configure pacman mirror
  template: src=mirrorlist.j2 dest=/tmp/root.x86_64/etc/pacman.d/mirrorlist owner=root group=root mode=0644

- name: initialize pacman keyring inside bootstrap chroot
  command: chroot /tmp/root.x86_64 pacman-key --init

- name: populate pacman keyring inside bootstrap chroot
  command: chroot /tmp/root.x86_64 pacman-key --populate archlinux

- name: install ucode update for Intel
  set_fact: ucode="intel-ucode"
  when: "'GenuineIntel' in ansible_facts['processor']"

- name: install ucode update for AMD
  set_fact: ucode="amd-ucode"
  when: "'AuthenticAMD' in ansible_facts['processor']"

- name: install arch base from bootstrap chroot
  command: chroot /tmp/root.x86_64 pacstrap /mnt base base-devel btrfs-progs grub openssh python {{ ucode }} creates=/tmp/root.x86_64/mnt/bin

- name: mount /proc to new chroot
  command: mount --rbind /proc /mnt/proc creates=/mnt/proc/uptime

- name: mount /sys to new chroot
  command: mount --rbind /sys /mnt/sys creates=/mnt/sys/dev

- name: mount /dev to new chroot
  command: mount --rbind /dev /mnt/dev creates=/mnt/dev/zero

- name: generate mdadm.conf
  shell: mdadm --detail --scan >> /mnt/etc/mdadm.conf
  when: filesystem == "ext4"

- name: configure locale.gen
  lineinfile: dest=/mnt/etc/locale.gen line="en_US.UTF-8 UTF-8"

- name: run locale-gen inside chroot
  command: chroot /mnt locale-gen

- name: run systemd-firstboot
  command: chroot /mnt systemd-firstboot --locale=en_US.UTF-8 --timezone=UTC --hostname={{ hostname }}

- name: add mdadm_udev to mkinitcpio.conf
  lineinfile:
    dest: /mnt/etc/mkinitcpio.conf
    backrefs: yes
    regexp: '^(.*)block filesystems(.*)$'
    line: '\1block mdadm_udev filesystems\2'
  when: filesystem == "ext4"

- name: run mkinitcpio
  command: chroot /mnt mkinitcpio -p linux

- name: configure network (static)
  template: src=10-static-ethernet.network.j2 dest=/mnt/etc/systemd/network/10-static-ethernet.network owner=root group=root mode=0644
  when: dhcp|default(False) == False

- name: configure network (dhcp)
  template: src=10-dhcp-ethernet.network.j2 dest=/mnt/etc/systemd/network/10-dhcp-ethernet.network owner=root group=root mode=0644
  when: dhcp|default(False) == True

- name: provide default mount options (btrfs)
  lineinfile:
    path: /mnt/etc/default/grub
    regexp: "^GRUB_CMDLINE_LINUX_DEFAULT="
    line: "GRUB_CMDLINE_LINUX_DEFAULT=\"rootflags=compress=lzo\""
  when: filesystem == "btrfs"

- name: install grub
  command: chroot /mnt grub-install --recheck {{ item }}
  with_items:
    - "{{ system_disks }}"

- name: configure grub
  command: chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

- name: enable services inside chroot
  command: chroot /mnt systemctl enable sshd systemd-networkd systemd-resolved fstrim.timer

- set_fact: pubkey_list="{{ lookup('file', "{{ playbook_dir }}/../../pubkeys/" + item) }}"
  register: pubkeys
  with_items: "{{ root_ssh_keys }}"

- set_fact: pubkey_string={{ pubkeys.results | map(attribute='ansible_facts.pubkey_list') | join('\n') }}

- name: add authorized key for root
  authorized_key: user=root key="{{ pubkey_string }}" path=/tmp/root.x86_64/mnt/root/.ssh/authorized_keys exclusive=yes

- name: configure sshd
  template: src=sshd_config.j2 dest=/mnt/etc/ssh/sshd_config owner=root group=root mode=0644

- name: create symlink to resolv.conf
  file: src=/run/systemd/resolve/resolv.conf dest=/mnt/etc/resolv.conf state=link force=yes

- name: clean pacman cache
  shell: yes | chroot /mnt pacman -Scc

- name: remove LOCK file on mountpoint
  file: path=/mnt/LOCK state=absent
