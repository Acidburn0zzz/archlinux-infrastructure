---

- name: install postgres
  pacman: name=postgresql,python2-psycopg2 state=present

- name: initialize postgres
  become: yes
  become_user: postgres
  become_method: su
  command: initdb --locale en_US.UTF-8 -E UTF8 -D '/var/lib/postgres/data'
  args:
    chdir: /var/lib/postgres
    creates: /var/lib/postgres/data/postgresql.conf
  notify:
    - restart postgres

- name: configure postgres
  template: src={{ item }}.j2 dest=/var/lib/postgres/data/{{ item }} owner=postgres group=postgres mode=0600
  with_items:
    - postgresql.conf
    - pg_hba.conf
  notify:
    - restart postgres

- name: start and enable postgres
  service: name=postgresql enabled=yes state=started

- name: set postgres user password
  postgresql_user: name=postgres password={{ vault_postgres_users.postgres }} encrypted=yes
  become: yes
  become_user: postgres
  become_method: su

- name: install postgres cert renewal hook
  template: src=letsencrypt.hook.d.j2 dest=/etc/letsencrypt/hook.d/postgres owner=root group=root mode=0755
  when: postgres_ssl == 'on'

- name: install postgres certificate
  copy: src=/etc/letsencrypt/live/{{ inventory_hostname }}/fullchain.pem dest={{ postgres_ssl_cert_file }}
        remote_src=true owner=postgres group=postgres mode=0400
  when: postgres_ssl == 'on'

- name: install postgres private key
  copy: src=/etc/letsencrypt/live/{{ inventory_hostname }}/privkey.pem dest={{ postgres_ssl_key_file }}
        remote_src=true owner=postgres group=postgres mode=0400
  when: postgres_ssl == 'on'

- name: install postgres ca
  copy: src=/etc/letsencrypt/live/{{ inventory_hostname }}/chain.pem dest={{ postgres_ssl_ca_file }}
        remote_src=true owner=postgres group=postgres mode=0400
  when: postgres_ssl == 'on'

- name: open firewall holes to known postgresql clients
  firewalld: service=postgresql permanent=true state=enabled source={{item}} immediate=yes
  with_items: "{{ postgres_ssl_hosts }}"
  when: configure_firewall
